{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// "description": "Log output to console"
	// }
	"IComponentdata": {
		"prefix": "cd",
		"body": [
			"using Unity.Entities;",
			"public struct $1 : IComponentData",
			"{",
			"public $2",
			"}"
		],
		"description": "add IComponentData"
	},
	"EntityManger": {
		"prefix": "emc",
		"body": [
			"EntityManager entityManager = World.DefaultGameObjectInjectionWorld.EntityManager;",
			"Entity $1 = entityManager.CreateEntity(typeof($1));",
			"entityManager.SetComponentData($1, new $1",
			"{});"
		],
		"description": "Created EntityManger"
	},
	"Authoring with prefab": {
		"prefix": "ap",
		"body": [
			"public class $1Authoring : MonoBehavior",
			"public GameObject $2Prefab;",
			"public class $1Baker : Baker<$1Authoring",
			"{",
			"public override void Bake($1Authoring authoring)",
			"{",
			"Entity E = GetEntity(TransformUsageFlags.None)",
			"AddComponent(E, new $1Component{",
			"$2Prefab = GetEntity(authoring.$2Prefab,TransformUsageFlags.None)",
			"});",
			"}}"
		],
		"description": "authoring prefab"
	}
}
